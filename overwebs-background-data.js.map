{"version":3,"sources":["overwebs-background-data.js"],"names":["GluonElement","assetPath","window","modulesAssetPath","mapBackgrounds","to_play","transition","preload","video","image","to_training","mirror","play","training","to_competitive","to_arcade","competitive","arcade","competitive_to_play","arcade_to_play","login","to_main","main","play_to_main","training_to_main","backgroundSets","hollywood","tracer","bastion","volskaya","widowmaker","soldier76","genji","gibraltar","winston","sombra","eichenwalde","mccree","roadhog","hanamura","reaper","temple_of_anubis","dva","pharah","OverwebsBackgroundData","properties","backgrounds","type","Object","notify","readOnly","backgroundSelection","String","select","observer","observedAttributes","attributeChangedCallback","_select","_selectBackgrounds","_backgrounds","dispatchEvent","Event","_backgroundSelection","connectedCallback","_index","RegExp","filter","test","Math","floor","random","length","console","warn","split","slice","reduce","Array","prototype","push","apply","map","customElements","define","is"],"mappings":"AAAA,OAASA,YAAT,KAA6B,qBAA7B,CAEA,KAAMC,WAAaC,OAAOC,gBAAP,EAA2BD,OAAOC,gBAAP,CAAwB,0BAAxB,EAAsD,GAAlF,EAA0F,EAA5G,CAEMC,eAAiB,MACd,CACLC,QAAS,CACPC,WAAY,MADL,CAEPC,wBAFO,CAGPC,MAAQ,GAAD,CAAO,qBAHP,CAIPC,MAAQ,GAAD,CAAO,qBAJP,CADJ,CAOLC,YAAa,CACXC,OAAQ,SADG,CAPR,CAULC,KAAM,CACJL,wBADI,CAEJC,MAAQ,GAAD,CAAO,kBAFV,CAGJC,MAAQ,GAAD,CAAO,kBAHV,CAVD,CAeLI,SAAU,CACRF,OAAQ,MADA,CAfL,CAkBLG,eAAgB,CACdR,WAAY,aADE,CAEdC,+BAFc,CAGdC,MAAQ,GAAD,CAAO,4BAHA,CAIdC,MAAQ,GAAD,CAAO,4BAJA,CAlBX,CAwBLM,UAAW,CACTJ,OAAQ,gBADC,CAxBN,CA2BL,WAAY,CACVA,OAAQ,gBADE,CA3BP,CA8BLK,YAAa,CACXT,+BADW,CAEXC,MAAQ,GAAD,CAAO,yBAFH,CAGXC,MAAQ,GAAD,CAAO,yBAHH,CA9BR,CAmCLQ,OAAQ,CACNN,OAAQ,aADF,CAnCH,CAsCL,QAAS,CACPA,OAAQ,aADD,CAtCJ,CAyCLO,oBAAqB,CACnBZ,mBADmB,CAEnBE,MAAQ,GAAD,CAAO,iCAFK,CAGnBC,MAAQ,GAAD,CAAO,iCAHK,CAzChB,CA8CLU,eAAgB,CACdR,OAAQ,qBADM,CA9CX,CAiDL,gBAAiB,CACfA,OAAQ,qBADO,CAjDZ,CAoDL,oBAAqB,CACnBA,OAAQ,qBADW,CApDhB,CAuDL,kBAAmB,CACjBL,WAAY,cADK,CAEjBC,gCAFiB,CAGjBC,MAAQ,GAAD,CAAO,6BAHG,CAIjBC,MAAQ,GAAD,CAAO,6BAJG,CAvDd,CA6DL,eAAgB,CACdF,gCADc,CAEdC,MAAQ,GAAD,CAAO,0BAFA,CAGdC,MAAQ,GAAD,CAAO,0BAHA,CA7DX,CAkELW,MAAO,CACLb,mBADK,CAELC,QAFK,CAGLC,MAAO,kBAHF,CAlEF,CAwELY,QAAS,CACPf,WAAY,MADL,CAEPC,qCAFO,CAxEJ,CA4ELe,KAAM,CACJf,qCADI,CA5ED,CA+ELgB,aAAc,CACZjB,WAAY,MADA,CA/ET,CAkFLkB,iBAAkB,CAChBb,OAAQ,cADQ,CAlFb,CAqFL,uBAAwB,CACtBL,WAAY,MADU,CArFnB,CADc,CAFvB,CA8FMmB,eAAiB,CAKrBC,UAAW,CACTC,OAAQvB,eAAe,WAAf,CADC,CAETwB,QAASxB,eAAe,WAAf,CAFA,CALU,CASrByB,SAAU,CACRC,WAAY1B,eAAe,UAAf,CADJ,CAER2B,UAAW3B,eAAe,UAAf,CAFH,CAGR4B,MAAO5B,eAAe,UAAf,CAHC,CATW,CAcrB6B,UAAW,CACTC,QAAS9B,eAAe,WAAf,CADA,CAET+B,OAAQ/B,eAAe,WAAf,CAFC,CAdU,CAkBrBgC,YAAa,CACXC,OAAQjC,eAAe,aAAf,CADG,CAEXkC,QAASlC,eAAe,aAAf,CAFE,CAlBQ,CAsBrBmC,SAAU,CACRC,OAAQpC,eAAe,UAAf,CADA,CAER+B,OAAQ/B,eAAe,UAAf,CAFA,CAtBW,CA6BrBqC,iBAAkB,CAChBC,IAAKtC,eAAe,kBAAf,CADW,CAEhBuC,OAAQvC,eAAe,kBAAf,CAFQ,CA7BG,CA9FvB,CAiIA,KAAMwC,uBAAN,QAAqC5C,aAAa,CAChD,UAAW6C,WAAX,EAAwB,CACtB,MAAO,CACLC,YAAa,CACXC,KAAMC,MADK,CAEXC,SAFW,CAGXC,WAHW,CADR,CAMLC,oBAAqB,CACnBJ,KAAMK,MADa,CAEnBH,SAFmB,CAGnBC,WAHmB,CANhB,CAWLG,OAAQ,CACNN,KAAMK,MADA,CAENE,SAAU,oBAFJ,CAXH,CAgBR,CAED,UAAWC,mBAAX,EAAgC,CAC9B,gBACD,CAEDC,+BAAmD,CACpC,QAAT,IAD6C,GAE/C,KAAKH,MAAL,EAF+C,CAIlD,CAED,GAAIA,OAAJ,GAAmB,CACb,IAAW,KAAKI,OADH,GAEf,KAAKA,OAAL,EAFe,CAGf,KAAKC,kBAAL,EAHe,CAKlB,CAED,GAAIL,OAAJ,EAAa,CACX,MAAO,MAAKI,OACb,CAED,GAAIX,YAAJ,GAA6B,CACvB,IAAgB,KAAKa,YADE,GAEzB,KAAKA,YAAL,EAFyB,CAGzB,KAAKC,aAAL,CAAmB,GAAIC,MAAJ,CAAU,qBAAV,CAAnB,CAHyB,CAK5B,CAED,GAAIf,YAAJ,EAAkB,CAChB,MAAO,MAAKa,YACb,CAED,GAAIR,oBAAJ,GAA6C,CACvC,IAAwB,KAAKW,oBADU,GAEzC,KAAKA,oBAAL,EAFyC,CAGzC,KAAKF,aAAL,CAAmB,GAAIC,MAAJ,CAAU,6BAAV,CAAnB,CAHyC,CAK5C,CAED,GAAIV,oBAAJ,EAA0B,CACxB,MAAO,MAAKW,oBACb,CAEDC,mBAAoB,CAClB,MAAMA,iBAAN,EADkB,CAEb,KAAKjB,WAFQ,EAGhB,KAAKY,kBAAL,EAEH,CAEDA,oBAAqB,CAEnB,GAAI,GAAQ,KAAKM,MAAL,CAAYvC,cAAZ,CAAZ,CAGA,GAAI,KAAK4B,MAAT,CAAiB,CAGf,GAAI,GAAc,GAAIY,OAAJ,CAAW,KAAKZ,MAAhB,CAAlB,CAEA,EAAQ,EAAMa,MAAN,CAAa,KACZ,EAAYC,IAAZ,GADD,CAGT,CAMD,GAHA,KAAKhB,mBAAL,CAA2B,EAAMiB,KAAKC,KAAL,CAAWD,KAAKE,MAAL,GAAgB,EAAMC,MAAjC,CAAN,CAG3B,CAAI,CAAC,KAAKpB,mBAAV,CAEE,WADAqB,SAAQC,IAAR,CAAa,kCAAb,CACA,CAIF,GAAI,GAAiB,KAAKtB,mBAAL,CAClBuB,KADkB,CACZ,GADY,EAElBC,KAFkB,CAEZ,CAFY,CAET,CAAC,CAFQ,EAGlBC,MAHkB,CAGX,OACC,IAJU,CAKhBnD,cALgB,CAArB,CASA,IAAK,GAAI,EAAT,MAGE,GAAI,CAAC,KAA2Bd,MAAhC,CAAwC,CAEtC,GAAI,GAAkB,KAA2BH,KAA3B,EAAqC,GAAE,KAAK2C,mBAAoB,GAA5B,CAAyC,MAAnG,CACA,EAAmB,GAAElD,SAAU,GAAb,CAA+B,EAHX,CAItC,GAAI,GAAkB,KAA2BQ,KAA3B,EAAqC,GAAD,CAAc,MAAxE,CACA,EAAmB,GAAER,SAAU,GAAb,CAA+B,EALX,CAOlC,UAA2BO,KAPO,GAQpC,KAA2BA,KAA3B,EARoC,EAUtC,KAA2BC,KAA3B,EACD,CAGH,KAAKqC,WAAL,EACD,CAEDkB,SAAa,CACX,KAAM,KAAN,CACA,IAAK,GAAI,EAAT,MAA2B,CACzB,GAAI,KAAe1D,UAAf,EAA6B,KAAeC,OAAhD,CACE,WAEFsE,MAAMC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,GAEE,KAAKhB,MAAL,CAAY,IAAZ,EAA4BiB,GAA5B,CAAgC,KACvB,EAAW,GAAX,EADT,CAFF,CAMD,CACD,QACD,CA1I+C,CA6IlDC,eAAeC,MAAf,CAAsBvC,uBAAuBwC,EAA7C,CAAiDxC,sBAAjD,C","file":"overwebs-background-data.js","sourcesContent":["import { GluonElement } from '../gluonjs/gluon.js';\n\nconst assetPath = (window.modulesAssetPath && window.modulesAssetPath('overwebs-background-data') + '/') || '';\n\nconst mapBackgrounds = map => {\n  return {\n    to_play: {\n      transition: 'play',\n      preload: ['play_to_main'],\n      video: `${map}/shared/to_play.mp4`,\n      image: `${map}/shared/to_play.jpg`\n    },\n    to_training: {\n      mirror: 'to_play'\n    },\n    play: {\n      preload: ['play_to_main'],\n      video: `${map}/shared/play.mp4`,\n      image: `${map}/shared/play.jpg`\n    },\n    training: {\n      mirror: 'play'\n    },\n    to_competitive: {\n      transition: 'competitive',\n      preload: ['competitive_to_play'],\n      video: `${map}/shared/to_competitive.mp4`,\n      image: `${map}/shared/to_competitive.jpg`\n    },\n    to_arcade: {\n      mirror: 'to_competitive'\n    },\n    'to_vs-ai': {\n      mirror: 'to_competitive'\n    },\n    competitive: {\n      preload: ['competitive_to_play'],\n      video: `${map}/shared/competitive.mp4`,\n      image: `${map}/shared/competitive.jpg`\n    },\n    arcade: {\n      mirror: 'competitive'\n    },\n    'vs-ai': {\n      mirror: 'competitive'\n    },\n    competitive_to_play: {\n      transition: ['play'],\n      video: `${map}/shared/competitive_to_play.mp4`,\n      image: `${map}/shared/competitive_to_play.jpg`\n    },\n    arcade_to_play: {\n      mirror: 'competitive_to_play'\n    },\n    'vs-ai_to_play': {\n      mirror: 'competitive_to_play'\n    },\n    'vs-ai_to_training': {\n      mirror: 'competitive_to_play'\n    },\n    'to_hero-gallery': {\n      transition: 'hero-gallery',\n      preload: ['hero-gallery_to_main'],\n      video: `${map}/shared/to_hero-gallery.mp4`,\n      image: `${map}/shared/to_hero-gallery.jpg`\n    },\n    'hero-gallery': {\n      preload: ['hero-gallery_to_main'],\n      video: `${map}/shared/hero-gallery.mp4`,\n      image: `${map}/shared/hero-gallery.jpg`\n    },\n    login: {\n      preload: ['to_main'],\n      video: false,\n      image: 'shared/login.jpg'\n    },\n    // Hero specific backgrounds\n    to_main: {\n      transition: 'main',\n      preload: ['to_play', 'to_hero-gallery']\n    },\n    main: {\n      preload: ['to_play', 'to_hero-gallery']\n    },\n    play_to_main: {\n      transition: 'main'\n    },\n    training_to_main: {\n      mirror: 'play_to_main'\n    },\n    'hero-gallery_to_main': {\n      transition: 'main'\n    }\n  };\n};\n\nconst backgroundSets = {\n  // halloween: {\n  //   reaper: mapBackgrounds('halloween'),\n  //   mercy: mapBackgrounds('halloween'),\n  // },\n  hollywood: {\n    tracer: mapBackgrounds('hollywood'),\n    bastion: mapBackgrounds('hollywood')\n  },\n  volskaya: {\n    widowmaker: mapBackgrounds('volskaya'),\n    soldier76: mapBackgrounds('volskaya'),\n    genji: mapBackgrounds('volskaya')\n  },\n  gibraltar: {\n    winston: mapBackgrounds('gibraltar'),\n    sombra: mapBackgrounds('gibraltar')\n  },\n  eichenwalde: {\n    mccree: mapBackgrounds('eichenwalde'),\n    roadhog: mapBackgrounds('eichenwalde')\n  },\n  hanamura: {\n    reaper: mapBackgrounds('hanamura'),\n    sombra: mapBackgrounds('hanamura')\n  },\n  // kings_row: {\n  //   reinhardt: mapBackgrounds('kings_row'),\n  // },\n  temple_of_anubis: {\n    dva: mapBackgrounds('temple_of_anubis'),\n    pharah: mapBackgrounds('temple_of_anubis')\n  }\n};\n\nclass OverwebsBackgroundData extends GluonElement {\n  static get properties() {\n    return {\n      backgrounds: {\n        type: Object,\n        notify: true,\n        readOnly: true\n      },\n      backgroundSelection: {\n        type: String,\n        notify: true,\n        readOnly: true\n      },\n      select: {\n        type: String,\n        observer: '_selectBackgrounds'\n      }\n    };\n  }\n\n  static get observedAttributes() {\n    return ['select'];\n  }\n\n  attributeChangedCallback(attr, oldValue, newValue) {\n    if (attr === 'select') {\n      this.select = newValue;\n    }\n  }\n\n  set select(select) {\n    if (select !== this._select) {\n      this._select = select;\n      this._selectBackgrounds();\n    }\n  }\n\n  get select() {\n    return this._select;\n  }\n\n  set backgrounds(backgrounds) {\n    if (backgrounds !== this._backgrounds) {\n      this._backgrounds = backgrounds;\n      this.dispatchEvent(new Event('backgrounds-changed'));\n    }\n  }\n\n  get backgrounds() {\n    return this._backgrounds;\n  }\n\n  set backgroundSelection(backgroundSelection) {\n    if (backgroundSelection !== this._backgroundSelection) {\n      this._backgroundSelection = backgroundSelection;\n      this.dispatchEvent(new Event('backgroundSelection-changed'));\n    }\n  }\n\n  get backgroundSelection() {\n    return this._backgroundSelection;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (!this.backgrounds) {\n      this._selectBackgrounds();\n    }\n  }\n\n  _selectBackgrounds() {\n    // index all possible backgroundSets\n    let index = this._index(backgroundSets);\n\n    // If we want to select a specific backgroundSet\n    if (this.select) {\n      // Treat `this.select` as a literal string to match\n      // let selectRegex = new RegExp(this.select.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'));\n      let selectRegex = new RegExp(this.select);\n      // Limit our options to backgroundSets that match our selection\n      index = index.filter(i => {\n        return selectRegex.test(i);\n      });\n    }\n\n    // Choose a random background from the selected options\n    this.backgroundSelection = index[Math.floor(Math.random() * index.length)];\n\n    // We weren't able to select anything\n    if (!this.backgroundSelection) {\n      console.warn('Could not select a backgroundSet');\n      return;\n    }\n\n    // Get the data object from the backgroundSets\n    let backgroundData = this.backgroundSelection\n      .split('/')\n      .slice(0, -1)\n      .reduce((object, key) => {\n        return object[key];\n      }, backgroundSets);\n\n    // Ok, we have selected backgroundData. Now we need to dynamically attach\n    // video source locations, if those have not been added yet\n    for (let background in backgroundData) {\n      // If the background needs to mirror another one,\n      // we don't have to do anything\n      if (!backgroundData[background].mirror) {\n        // Use the given sources if they are defined, otherwise infer the source\n        let backgroundVideo = backgroundData[background].video || `${this.backgroundSelection}${background}.mp4`;\n        backgroundVideo = `${assetPath}${backgroundVideo}`;\n        let backgroundImage = backgroundData[background].image || `${background}.jpg`;\n        backgroundImage = `${assetPath}${backgroundImage}`;\n\n        if (backgroundData[background].video !== false) {\n          backgroundData[background].video = backgroundVideo;\n        }\n        backgroundData[background].image = backgroundImage;\n      }\n    }\n\n    this.backgrounds = backgroundData;\n  }\n\n  _index(tree) {\n    const result = [];\n    for (let property in tree) {\n      if (tree[property].transition || tree[property].preload) {\n        return [''];\n      }\n      Array.prototype.push.apply(\n        result,\n        this._index(tree[property]).map(item => {\n          return property + '/' + item;\n        })\n      );\n    }\n    return result;\n  }\n}\n\ncustomElements.define(OverwebsBackgroundData.is, OverwebsBackgroundData);\n"]}